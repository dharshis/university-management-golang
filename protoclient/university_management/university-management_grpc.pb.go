// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package university_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UniversityManagementServiceClient is the client API for UniversityManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniversityManagementServiceClient interface {
	GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentResponse, error)
	GetStudents(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentsResponse, error)
	GetStudentDirectory(ctx context.Context, in *GetAllStudentRequest, opts ...grpc.CallOption) (*GetAllStudentsResponse, error)
	GetStaffAssignedToStudent(ctx context.Context, in *GetStaffRequest, opts ...grpc.CallOption) (*GetStaffsResponse, error)
	Notify(ctx context.Context, in *GetNotifyRequest, opts ...grpc.CallOption) (*GetNotifyResponse, error)
	GetAttendance(ctx context.Context, in *GetAttendanceRequest, opts ...grpc.CallOption) (UniversityManagementService_GetAttendanceClient, error)
}

type universityManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUniversityManagementServiceClient(cc grpc.ClientConnInterface) UniversityManagementServiceClient {
	return &universityManagementServiceClient{cc}
}

func (c *universityManagementServiceClient) GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentResponse, error) {
	out := new(GetDepartmentResponse)
	err := c.cc.Invoke(ctx, "/university_management.UniversityManagementService/GetDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityManagementServiceClient) GetStudents(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentsResponse, error) {
	out := new(GetStudentsResponse)
	err := c.cc.Invoke(ctx, "/university_management.UniversityManagementService/GetStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityManagementServiceClient) GetStudentDirectory(ctx context.Context, in *GetAllStudentRequest, opts ...grpc.CallOption) (*GetAllStudentsResponse, error) {
	out := new(GetAllStudentsResponse)
	err := c.cc.Invoke(ctx, "/university_management.UniversityManagementService/GetStudentDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityManagementServiceClient) GetStaffAssignedToStudent(ctx context.Context, in *GetStaffRequest, opts ...grpc.CallOption) (*GetStaffsResponse, error) {
	out := new(GetStaffsResponse)
	err := c.cc.Invoke(ctx, "/university_management.UniversityManagementService/GetStaffAssignedToStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityManagementServiceClient) Notify(ctx context.Context, in *GetNotifyRequest, opts ...grpc.CallOption) (*GetNotifyResponse, error) {
	out := new(GetNotifyResponse)
	err := c.cc.Invoke(ctx, "/university_management.UniversityManagementService/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityManagementServiceClient) GetAttendance(ctx context.Context, in *GetAttendanceRequest, opts ...grpc.CallOption) (UniversityManagementService_GetAttendanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &UniversityManagementService_ServiceDesc.Streams[0], "/university_management.UniversityManagementService/GetAttendance", opts...)
	if err != nil {
		return nil, err
	}
	x := &universityManagementServiceGetAttendanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UniversityManagementService_GetAttendanceClient interface {
	Recv() (*GetAttendanceResponse, error)
	grpc.ClientStream
}

type universityManagementServiceGetAttendanceClient struct {
	grpc.ClientStream
}

func (x *universityManagementServiceGetAttendanceClient) Recv() (*GetAttendanceResponse, error) {
	m := new(GetAttendanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UniversityManagementServiceServer is the server API for UniversityManagementService service.
// All implementations must embed UnimplementedUniversityManagementServiceServer
// for forward compatibility
type UniversityManagementServiceServer interface {
	GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error)
	GetStudents(context.Context, *GetStudentRequest) (*GetStudentsResponse, error)
	GetStudentDirectory(context.Context, *GetAllStudentRequest) (*GetAllStudentsResponse, error)
	GetStaffAssignedToStudent(context.Context, *GetStaffRequest) (*GetStaffsResponse, error)
	Notify(context.Context, *GetNotifyRequest) (*GetNotifyResponse, error)
	GetAttendance(*GetAttendanceRequest, UniversityManagementService_GetAttendanceServer) error
	mustEmbedUnimplementedUniversityManagementServiceServer()
}

// UnimplementedUniversityManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUniversityManagementServiceServer struct {
}

func (UnimplementedUniversityManagementServiceServer) GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedUniversityManagementServiceServer) GetStudents(context.Context, *GetStudentRequest) (*GetStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedUniversityManagementServiceServer) GetStudentDirectory(context.Context, *GetAllStudentRequest) (*GetAllStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentDirectory not implemented")
}
func (UnimplementedUniversityManagementServiceServer) GetStaffAssignedToStudent(context.Context, *GetStaffRequest) (*GetStaffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffAssignedToStudent not implemented")
}
func (UnimplementedUniversityManagementServiceServer) Notify(context.Context, *GetNotifyRequest) (*GetNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedUniversityManagementServiceServer) GetAttendance(*GetAttendanceRequest, UniversityManagementService_GetAttendanceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAttendance not implemented")
}
func (UnimplementedUniversityManagementServiceServer) mustEmbedUnimplementedUniversityManagementServiceServer() {
}

// UnsafeUniversityManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniversityManagementServiceServer will
// result in compilation errors.
type UnsafeUniversityManagementServiceServer interface {
	mustEmbedUnimplementedUniversityManagementServiceServer()
}

func RegisterUniversityManagementServiceServer(s grpc.ServiceRegistrar, srv UniversityManagementServiceServer) {
	s.RegisterService(&UniversityManagementService_ServiceDesc, srv)
}

func _UniversityManagementService_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityManagementServiceServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_management.UniversityManagementService/GetDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityManagementServiceServer).GetDepartment(ctx, req.(*GetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityManagementService_GetStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityManagementServiceServer).GetStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_management.UniversityManagementService/GetStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityManagementServiceServer).GetStudents(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityManagementService_GetStudentDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityManagementServiceServer).GetStudentDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_management.UniversityManagementService/GetStudentDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityManagementServiceServer).GetStudentDirectory(ctx, req.(*GetAllStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityManagementService_GetStaffAssignedToStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityManagementServiceServer).GetStaffAssignedToStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_management.UniversityManagementService/GetStaffAssignedToStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityManagementServiceServer).GetStaffAssignedToStudent(ctx, req.(*GetStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityManagementService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityManagementServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_management.UniversityManagementService/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityManagementServiceServer).Notify(ctx, req.(*GetNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityManagementService_GetAttendance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAttendanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UniversityManagementServiceServer).GetAttendance(m, &universityManagementServiceGetAttendanceServer{stream})
}

type UniversityManagementService_GetAttendanceServer interface {
	Send(*GetAttendanceResponse) error
	grpc.ServerStream
}

type universityManagementServiceGetAttendanceServer struct {
	grpc.ServerStream
}

func (x *universityManagementServiceGetAttendanceServer) Send(m *GetAttendanceResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UniversityManagementService_ServiceDesc is the grpc.ServiceDesc for UniversityManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniversityManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "university_management.UniversityManagementService",
	HandlerType: (*UniversityManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDepartment",
			Handler:    _UniversityManagementService_GetDepartment_Handler,
		},
		{
			MethodName: "GetStudents",
			Handler:    _UniversityManagementService_GetStudents_Handler,
		},
		{
			MethodName: "GetStudentDirectory",
			Handler:    _UniversityManagementService_GetStudentDirectory_Handler,
		},
		{
			MethodName: "GetStaffAssignedToStudent",
			Handler:    _UniversityManagementService_GetStaffAssignedToStudent_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _UniversityManagementService_Notify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAttendance",
			Handler:       _UniversityManagementService_GetAttendance_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "university-management.proto",
}
